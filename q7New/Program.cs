int[,] grid = { { 470, 348, 198, 123, 943, 77, 264, 72, 485, 348, 548, 171, 906, 51, 651, 299, 730, 873, 281, 194 }, { 633, 316, 864, 741, 695, 740, 236, 747, 191, 202, 182, 490, 389, 624, 237, 945, 138, 164, 107, 764 }, { 453, 890, 315, 258, 867, 224, 261, 211, 765, 1, 852, 443, 715, 332, 153, 457, 518, 86, 116, 864 }, { 810, 412, 177, 303, 288, 595, 216, 688, 314, 361, 231, 605, 516, 575, 354, 106, 467, 315, 29, 469 }, { 516, 185, 192, 173, 702, 534, 434, 406, 779, 328, 375, 343, 824, 161, 869, 502, 134, 182, 767, 520 }, { 404, 655, 445, 908, 632, 20, 366, 484, 874, 125, 732, 593, 305, 845, 718, 250, 588, 164, 927, 435 }, { 116, 342, 7, 464, 290, 317, -3, 802, 129, 175, 825, 116, 663, 891, 129, 263, 531, 598, 615, 231 }, { 62, 44, 51, 24, 460, 32, 38, 10, 178, 752, 145, 408, 52, 782, 808, 878, 16, 371, 2, 525 }, { 871, 284, 8, 742, 956, 26, 783, 14, -19, 227, 292, 45, 88, 64, 592, 104, 495, 337, 765, 872 }, { 564, 235, 536, 68, 660, 100, 682, -27, 488, 188, 162, 473, 82, 108, 592, 48, 548, 669, 49, 90 }, { 244, 575, 108, 114, 82, 921, 329, 412, 538, 100, 407, 242, 635, 8, 175, 221, 178, 617, 792, 791 }, { 846, -38, 353, 9, 749, 411, 458, 374, 577, 743, 103, 56, 750, 691, 69, 668, 320, 289, 951, 277 }, { 604, 8, 1, 830, 331, 817, 414, 446, 42, 166, 59, 542, 490, 743, 543, 201, 294, 310, 252, 297 }, { 247, -30, 48, 42, 697, 904, 539, 267, 325, 165, 240, 216, 528, 480, 831, 325, 425, 213, 291, 581 }, { 34, 801, 33, 758, 568, 71, 209, 108, 369, 600, 208, 919, 243, 775, 259, 274, 234, 791, 74, 112 }, { 243, 191, 544, 296, 551, 900, 170, 383, 330, 473, 931, 241, 286, 239, 672, 242, 306, 126, 404, 346 }, { 743, 373, 367, 386, 173, 220, 604, 353, 785, 408, 20, 786, 88, 439, 204, 755, 12, 280, 985, 870 }, { 524, 332, 945, 87, 623, 191, 288, 820, 159, 127, 593, 409, 360, 290, 272, 41, 59, 310, 155, 735 }, { 487, 818, 267, 908, 602, 989, 259, 315, 32, 956, 915, 69, 533, 211, 486, 972, 20, 720, 330, 410 }, { 968, 76, 287, 244, 870, 379, 591, 997, 139, 819, 7, 510, 462, 534, 299, 933, 470, 891, 252, 335 }, { 665, 837, 257, 647, 70, 417, 207, 126, 160, 152, 774, 9, 564, 961, 562, 553, 269, 441, 290, 267 }, { 235, 220, 595, 317, 348, 303, 741, 652, 127, 811, 550, 839, 949, 462, 622, 508, 863, 431, 272, 361 }, { 712, 561, 224, 660, 41, 858, 771, 107, 419, 371, 587, 489, 76, 867, 589, 681, 348, 340, 575, 895 }, { 710, 523, 669, 55, 83, 589, 400, 765, 371, 876, 475, 511, 625, 434, 894, 83, 702, 745, -8, 20 }, { 64, 674, 119, 197, 312, 292, 896, 415, 932, 245, 787, 38, 267, 939, 827, 413, 149, 185, 235, 771 }, { 601, 195, 90, 292, 137, 613, 707, 264, 745, 59, 973, 99, 70, 326, 91, 935, 405, 150, 626, 486 }, { 293, 181, 827, 220, 253, 204, 677, 582, 370, 538, 13, 358, 113, 21, 186, 161, 488, 977, 7, 89 }, { 381, 552, 506, 724, 201, 772, 534, 564, 398, 349, 576, 247, 421, 46, 37, 837, 261, 433, 901, 49 }, { 97, 69, 662, 4, 248, 72, 782, 519, 175, 660, 233, 289, 257, 479, 356, 234, 308, 170, 993, 309 }, { 43, 613, 85, 705, 238, 435, 648, 813, 190, 741, 557, 697, 545, 411, 878, 352, 708, 871, 430, 408 } };
List<int> numbers = new List<int>();



for (int rowIndex = 0; rowIndex < grid.GetLength(0); rowIndex++)
{
    for (int columnIndex = 0; columnIndex < grid.GetLength(1); columnIndex++)
    {
        
        numbers.Add(grid[rowIndex, columnIndex]);
    }
    int largestNumber = FindLargestNumberWithFourLargerNeighbours(grid);
    Console.WriteLine("The largest number with four larger neighbors is: " + largestNumber);
}

static int FindLargestNumberWithFourLargerNeighbours(int[,] grid)
{
    int maxNumber = int.MinValue;
    int DanialRows = grid.GetLength(0);
    int DanialColumns = grid.GetLength(1);

    //iterating through the grid , skipping edges

    for(int i = 1; i < DanialRows - 1; i++)
    {
        for (int k = 1; k < DanialColumns -1; k ++)
        {
            int DanialCurrentNumber = grid[i, k];
            //checking if all four numbers are larger
            if(grid[i - 1, k] > DanialCurrentNumber && grid[i + 1, k] > DanialCurrentNumber && grid[i, k - 1] > DanialCurrentNumber && grid[i, k + 1] > DanialCurrentNumber)
            {
                if(DanialCurrentNumber > maxNumber)
                {
                    maxNumber = DanialCurrentNumber;
                }
            }
            
        }
    }
    return maxNumber;
}